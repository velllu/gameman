use crate::{
    bus::Bus,
    common::Bit,
    flags::Flags,
    registers::{ReadRegister, Registers},
};

use super::{
    instructions::{Bytes, Cycles},
    Cpu,
};

impl Cpu {
    #[rustfmt::skip]
    pub fn interpret_cb_opcode(
        &mut self,
        opcode: u8,
        flags: &mut Flags,
        regs: &mut Registers,
        bus: &mut Bus,
    ) -> (Bytes, Cycles) {
        match opcode {
            0x40 => { flags.set_z_s_hc(regs.b.get_bit(0), false, true); (1, 1) },
            0x41 => { flags.set_z_s_hc(regs.c.get_bit(0), false, true); (1, 1) },
            0x42 => { flags.set_z_s_hc(regs.d.get_bit(0), false, true); (1, 1) },
            0x43 => { flags.set_z_s_hc(regs.e.get_bit(0), false, true); (1, 1) },
            0x44 => { flags.set_z_s_hc(regs.h.get_bit(0), false, true); (1, 1) },
            0x45 => { flags.set_z_s_hc(regs.l.get_bit(0), false, true); (1, 1) },
            0x47 => { flags.set_z_s_hc(regs.a.get_bit(0), false, true); (1, 1) },
            0x48 => { flags.set_z_s_hc(regs.b.get_bit(1), false, true); (1, 1) },
            0x49 => { flags.set_z_s_hc(regs.c.get_bit(1), false, true); (1, 1) },
            0x4A => { flags.set_z_s_hc(regs.d.get_bit(1), false, true); (1, 1) },
            0x4B => { flags.set_z_s_hc(regs.e.get_bit(1), false, true); (1, 1) },
            0x4C => { flags.set_z_s_hc(regs.h.get_bit(1), false, true); (1, 1) },
            0x4D => { flags.set_z_s_hc(regs.l.get_bit(1), false, true); (1, 1) },
            0x4F => { flags.set_z_s_hc(regs.a.get_bit(1), false, true); (1, 1) },
            0x50 => { flags.set_z_s_hc(regs.b.get_bit(2), false, true); (1, 1) },
            0x51 => { flags.set_z_s_hc(regs.c.get_bit(2), false, true); (1, 1) },
            0x52 => { flags.set_z_s_hc(regs.d.get_bit(2), false, true); (1, 1) },
            0x53 => { flags.set_z_s_hc(regs.e.get_bit(2), false, true); (1, 1) },
            0x54 => { flags.set_z_s_hc(regs.h.get_bit(2), false, true); (1, 1) },
            0x55 => { flags.set_z_s_hc(regs.l.get_bit(2), false, true); (1, 1) },
            0x57 => { flags.set_z_s_hc(regs.a.get_bit(2), false, true); (1, 1) },
            0x58 => { flags.set_z_s_hc(regs.b.get_bit(3), false, true); (1, 1) },
            0x59 => { flags.set_z_s_hc(regs.c.get_bit(3), false, true); (1, 1) },
            0x5A => { flags.set_z_s_hc(regs.d.get_bit(3), false, true); (1, 1) },
            0x5B => { flags.set_z_s_hc(regs.e.get_bit(3), false, true); (1, 1) },
            0x5C => { flags.set_z_s_hc(regs.h.get_bit(3), false, true); (1, 1) },
            0x5D => { flags.set_z_s_hc(regs.l.get_bit(3), false, true); (1, 1) },
            0x5F => { flags.set_z_s_hc(regs.a.get_bit(3), false, true); (1, 1) },
            0x60 => { flags.set_z_s_hc(regs.b.get_bit(4), false, true); (1, 1) },
            0x61 => { flags.set_z_s_hc(regs.c.get_bit(4), false, true); (1, 1) },
            0x62 => { flags.set_z_s_hc(regs.d.get_bit(4), false, true); (1, 1) },
            0x63 => { flags.set_z_s_hc(regs.e.get_bit(4), false, true); (1, 1) },
            0x64 => { flags.set_z_s_hc(regs.h.get_bit(4), false, true); (1, 1) },
            0x65 => { flags.set_z_s_hc(regs.l.get_bit(4), false, true); (1, 1) },
            0x67 => { flags.set_z_s_hc(regs.a.get_bit(4), false, true); (1, 1) },
            0x68 => { flags.set_z_s_hc(regs.b.get_bit(5), false, true); (1, 1) },
            0x69 => { flags.set_z_s_hc(regs.c.get_bit(5), false, true); (1, 1) },
            0x6A => { flags.set_z_s_hc(regs.d.get_bit(5), false, true); (1, 1) },
            0x6B => { flags.set_z_s_hc(regs.e.get_bit(5), false, true); (1, 1) },
            0x6C => { flags.set_z_s_hc(regs.h.get_bit(5), false, true); (1, 1) },
            0x6D => { flags.set_z_s_hc(regs.l.get_bit(5), false, true); (1, 1) },
            0x6F => { flags.set_z_s_hc(regs.a.get_bit(5), false, true); (1, 1) },
            0x70 => { flags.set_z_s_hc(regs.b.get_bit(6), false, true); (1, 1) },
            0x71 => { flags.set_z_s_hc(regs.c.get_bit(6), false, true); (1, 1) },
            0x72 => { flags.set_z_s_hc(regs.d.get_bit(6), false, true); (1, 1) },
            0x73 => { flags.set_z_s_hc(regs.e.get_bit(6), false, true); (1, 1) },
            0x74 => { flags.set_z_s_hc(regs.h.get_bit(6), false, true); (1, 1) },
            0x75 => { flags.set_z_s_hc(regs.l.get_bit(6), false, true); (1, 1) },
            0x77 => { flags.set_z_s_hc(regs.a.get_bit(6), false, true); (1, 1) },
            0x78 => { flags.set_z_s_hc(regs.b.get_bit(7), false, true); (1, 1) },
            0x79 => { flags.set_z_s_hc(regs.c.get_bit(7), false, true); (1, 1) },
            0x7A => { flags.set_z_s_hc(regs.d.get_bit(7), false, true); (1, 1) },
            0x7B => { flags.set_z_s_hc(regs.e.get_bit(7), false, true); (1, 1) },
            0x7C => { flags.set_z_s_hc(regs.h.get_bit(7), false, true); (1, 1) },
            0x7D => { flags.set_z_s_hc(regs.l.get_bit(7), false, true); (1, 1) },
            0x7F => { flags.set_z_s_hc(regs.a.get_bit(7), false, true); (1, 1) },

            0x46 => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(0), false, true); (1, 1) },
            0x4E => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(1), false, true); (1, 1) },
            0x56 => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(2), false, true); (1, 1) },
            0x5E => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(3), false, true); (1, 1) },
            0x66 => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(4), false, true); (1, 1) },
            0x6E => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(5), false, true); (1, 1) },
            0x76 => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(6), false, true); (1, 1) },
            0x7E => { flags.set_z_s_hc(bus[(regs.h, regs.l).get()].get_bit(7), false, true); (1, 1) },

            _ => panic!("Unimplemented CB opcode: {:x}", opcode),
        }
    }
}
